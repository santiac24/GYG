-- Correr primero el comando de crear la BBDD
-- Luego correr el comando para usar la BBDD creada
-- Finalmente correr los comandos de crear las tablas 

-- Se crea la base de datos
CREATE DATABASE DBSISTEMA_VENTAS
 
 GO

-- 

USE DBSISTEMA_VENTAS

 GO

-- Se crean las tablas

-- Tabla de roles
create table ROLES(
 Id_rol int primary key identity,
 Rol varchar(50)
)

 GO

-- Tabla de usuarios
create table USUARIOS(
 Id_usuario int primary key identity,
 Nombre varchar(50),
 Usuario varchar(50),
 Contrasena varchar(50),
 Rol_id int references ROLES(Id_rol)
)
 GO

-- Tabla de sexos
create table SEXOS(
 Id_sexo int primary key identity,
 Sexo varchar(50)
)

 GO


-- Tabla de clientes
create table CLIENTES(
 Id_cliente int primary key identity,
 Nombre varchar(50),
 Cedula varchar(14),
 Celular varchar(14),
 Direccion varchar(40),
 Fecha_nacimiento datetime default getDate(),
 Sexo_id int references SEXOS(Id_sexo)
 
)

 GO

-- Tabla de formas de pago
create table FORMA_PAGO(
 Id_forma_pago int primary key identity,
 Forma_pago varchar(50)
)

 GO

-- Tabla de tallas
create table TALLAS(
 Id_talla int primary key identity,
 Talla varchar(18)
)

 GO

-- Tabla de colores
create table COLORES(
 Id_color int primary key identity,
 Color varchar(30)
)

 GO

-- Tabla de categorias
create table CATEGORIAS(
 Id_categoria int primary key identity,
 Categoria varchar(30)
)

 GO

-- Tabla de subcategorias
create table SUBCATEGORIAS(
 Id_subcategoria int primary key identity,
 subcategoria varchar(50),
 Categoria_id int references CATEGORIAS(Id_categoria)
)

 GO

-- Tabla de prendas
create table PRENDAS(
 Id_prenda int primary key identity,
 prenda varchar(500),
 Cantidad_dispo int,
 Precio_compra decimal(10,2),
 Precio_venta decimal(10,2),
 Subcategoria_id int references SUBCATEGORIAS(Id_subcategoria),
 Talla_id int references TALLAS(Id_talla),
 Color_id int references COLORES(Id_color)
)

 GO

-- Tabla de ventas
create table VENTAS(
 Id_venta int primary key identity,
 Fecha datetime default getDate(),
 Valor decimal(10,2),
 Cliente_id int references CLIENTES(Id_cliente),
 Usuario_id int references USUARIOS(Id_usuario),
 Forma_pago_id int references FORMA_PAGO(Id_forma_pago)
)

 GO

-- Tabla de detalles de ventas
create table DETALLE_VENTAS(
 Id_detalle_venta int primary key identity,
 Venta_id int references VENTAS(Id_venta),
 Prenda_id int references PRENDAS(Id_prenda),
 Cantidad int,
 Precio_venta_unidad decimal(10,2),
 Subtotal decimal(10,2)
)

 GO

-- Tabla de provedores
create table PROVEDORES(
 Id_provedor int primary key identity,
 Provedor varchar(50),
 Telefonos varchar(14),
 Correo varchar(50)
)

 GO

-- Tabla de compras
create table COMPRAS(
 Id_compra int primary key identity,
 Usuario_id int references USUARIOS(Id_usuario),
 Fecha datetime default getDate(),
 Valor decimal(10,2)
)

 GO

-- Tabla de detalles de compras
create table DETALLE_COMPRAS(
 Id_detalle_compra int primary key identity,
 Compra_id int references COMPRAS(Id_compra),
 Prenda_id int references PRENDAS(Id_prenda),
 Cantidad int,
 Provedor_id int references PROVEDORES(Id_provedor),
 Precio_venta_unidad decimal(10,2),
 Subtotal decimal(10,2)
)

 GO

-- Tabla de plan separes
create table PLAN_SEPARES(
 Id_separe int primary key identity,
 Cliente_id int references CLIENTES(Id_cliente),
 Venta_id int references VENTAS(Id_venta),
 valor_restante decimal(10,2)
)

 GO

create table PERMISOS(
Id_permiso int primary key identity,
Rol_id int references ROLES(Id_rol),
NombreMenu varchar(100),
FechaRegistro datetime default getDate())

GO

-- Procedimientos

--Para insertar un usuario:

CREATE PROC P_REGISTRARUSUARIO(
@Nombre varchar (50),
@Usuario varchar (50),
@Contrasena varchar (50),
@IdRol int,
@IdUsuarioResultado int output,
@Mensaje varchar (500) output
)
as
begin
	SET @IdUsuarioResultado=0
	SET @Mensaje=''

	if not exists(select * from USUARIOS where Usuario = @Usuario)
	begin
		INSERT INTO USUARIOS (Nombre, Usuario, Contrasena, Rol_id)
		VALUES 
		(@Nombre, @Usuario,@Contrasena, @IdRol)

		SET @IdUsuarioResultado = SCOPE_IDENTITY()
		
	end
	else
		set @Mensaje = 'Ya existe un usario con ese nombre de usuario'
end

--Para actualizar un usuario:

CREATE PROC P_EDITARUSUARIO(
@Id_Usuario int,
@Nombre varchar (50),
@Usuario varchar (50),
@Contrasena varchar (50),
@IdRol int,
@Respuesta bit output,
@Mensaje varchar (500) output
)
as
begin
	set @Respuesta=0
	SET @Mensaje=''

	if not exists(select * from USUARIOS where Usuario = @Usuario AND Id_usuario!=@Id_Usuario)
	begin
		UPDATE USUARIOS SET
		Nombre = @Nombre,
		Usuario = @Usuario,
		Contrasena = @Contrasena,
		Rol_id = @IdRol
		WHERE Id_usuario = @Id_Usuario

		SET @Respuesta = 1
	end
	else
		set @Mensaje = 'Ya existe un usario con ese nombre de usuario'
end

--Para eliminar un usuario

CREATE PROC P_ELIMINARUSUARIO(
@Id_Usuario int,
@Respuesta bit output,
@Mensaje varchar (500) output
)
as
begin
	SET @Respuesta=0
	SET @Mensaje=''
	DECLARE @Pasoreglas bit = 1

	IF EXISTS(SELECT * FROM USUARIOS u INNER JOIN COMPRAS c ON u.Id_usuario=c.Usuario_id WHERE u.Id_usuario = c.Usuario_id)
	BEGIN
		SET @Pasoreglas=0
		SET @Respuesta=0
		SET @Mensaje = @Mensaje + 'El usuario tiene compras hechas por lo que no se puede eliminar\n'
	END

	IF EXISTS(SELECT * FROM USUARIOS u INNER JOIN VENTAS v ON u.Id_usuario=v.Usuario_id WHERE u.Id_usuario = v.Usuario_id)
	BEGIN
		SET @Pasoreglas=0
		SET @Respuesta=0
		SET @Mensaje = @Mensaje + 'El usuario ha hecho ventas por lo que no se puede eliminar \'
	END

	IF (@Pasoreglas=1)
	BEGIN
		DELETE FROM USUARIOS WHERE Id_usuario = @Id_Usuario
		SET @Respuesta = 1
	END
END

---- PROCEDIMIENTO PARA CATEGOR√çAS ----

--procedimiento para guardar categoria
CREATE PROC SP_Registrarcategoria(
@Categoria varchar(30),
@Resultado int output,
@Mensaje varchar(500) output
)as 
begin 
	SET @Resultado = 0
	SET @Mensaje=''

	IF NOT EXISTS (SELECT * FROM CATEGORIAS WHERE Categoria = @Categoria)
	begin 
		insert into CATEGORIAS(Categoria) values (@Categoria)
		set @Resultado = SCOPE_IDENTITY()
	end
	ELSE 
		set @Mensaje ='No se puede repetir la categoria'
end

go

-- Procedimiento para modificar categoria
create procedure SP_EditarCategoria(
@IdCategoria int,
@Categoria varchar(30),
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	SET @Resultado = 1
	SET @Mensaje=''

	IF NOT EXISTS (select * from CATEGORIAS where Categoria = @Categoria)
		update CATEGORIAS set
		Categoria = @Categoria
		where Id_categoria = @IdCategoria
	else
	begin 
		set @Resultado = 0
		set @Mensaje = 'No se puede repetir la categoria'
	end

end

go

create procedure SP_EliminarCategoria(
@IdCategoria int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	set @Resultado = 1
	SET @Mensaje=''
	if not exists (
		select * from CATEGORIAS c
		inner join SUBCATEGORIAS sc on sc.Categoria_id = c.Id_categoria
		where c.Id_categoria = @IdCategoria
	)
	begin 
		delete top(1) from CATEGORIAS where Id_categoria = @IdCategoria
	end
	else
	begin
		SET @Resultado = 0
		set @Mensaje = 'La categoria se encuentra relacionada a una subcategoria'
	end
end

--- PROCEDIMIENTOS PARA PRODUCTOS -----

CREATE PROC SP_Registrarprenda(
@Prenda varchar(500),
@Subcategoria_id int,
@Talla_id int,
@Color_id int,
@Cantidad_dispo int,
@Precio_compra decimal(10,2),
@Precio_venta decimal(10,2),
@Resultado bit output,
@Mensaje varchar(500) output
)as
begin
	SET @Resultado = 0
	SET @Mensaje = 0
	IF NOT EXISTS (SELECT * FROM PRENDAS WHERE Prenda=@Prenda)
	begin 
		insert into PRENDAS(Prenda, Subcategoria_id, Talla_id, Color_id, Cantidad_dispo, Precio_compra, Precio_venta)
		values(@Prenda, @Subcategoria_id, @Talla_id,@Color_id, @Cantidad_dispo, @Precio_compra, @Precio_venta)
		set @Resultado = SCOPE_IDENTITY()
	end
	ELSE
		set @Mensaje = 'Ya existe una prenda con este nombre'

end

GO
CREATE PROCEDURE SP_Modificarprenda(
@Id_prenda int,
@Prenda varchar(500),
@Subcategoria_id int,
@Talla_id int,
@Color_id int,
@Cantidad_dispo int,
@Precio_compra decimal(10,2),
@Precio_venta decimal(10,2),
@Resultado bit output,
@Mensaje varchar(500) output
)as
begin
	set @Resultado = 1
	if not exists (select * from PRENDAS where Id_prenda != @Id_prenda and prenda = @Prenda)
		update PRENDAS set
		Cantidad_dispo = @Cantidad_dispo,
		Precio_compra = @Precio_compra,
		@Precio_venta = @Precio_venta,
		Subcategoria_id = @Subcategoria_id,
		Talla_id = @Talla_id,
		Color_id = @Color_id
		where Prenda = @Prenda
	else
	begin
		set @Resultado = 0
		set @Mensaje = 'Ya existe una prenda con ese mismo nombre'
	end
end
go

CREATE PROC SP_Eliminarprenda(
@Id_prenda int,
@Respuesta bit output,
@Mensaje varchar(500) output
)as
begin 
	set @Respuesta = 0
	set @Mensaje = ''
	declare @pasoreglas bit = 1

	if exists (select * from DETALLE_COMPRAS dc
	INNER JOIN PRENDAS P ON P.Id_prenda = DC.Prenda_id
	WHERE P.Id_prenda = @Id_prenda
	)
	BEGIN
		SET @pasoreglas = 0
		SET @Respuesta = 0
		SET @Mensaje = @Mensaje + 'No se puede eliminar una prenda relacionada a una compra'
	END
	if exists (select * from DETALLE_VENTAS dv 
	inner join PRENDAS p on p.Id_prenda = dv.Prenda_id
	where p.Id_prenda = @Id_prenda
	)
	begin
		set @pasoreglas = 0
		SET @Respuesta = 0
		SET @Mensaje = @Mensaje + 'No se puede eliminar una prenda relacionada a una venta'
	end
	if(@pasoreglas = 1)
	begin
		delete from PRENDAS where Id_prenda = @Id_prenda
		set @Respuesta = 1
	end
end


---PROCEDIMIENTO PARA COLORES-----------------------

CREATE PROC SP_Registrarcolor(
@Color varchar(30),
@Resultado int output,
@Mensaje varchar(500) output
)as 
begin 
	SET @Resultado = 0
	SET @Mensaje=''

	IF NOT EXISTS (SELECT * FROM COLORES WHERE color = @Color)
	begin 
		insert into COLORES(Color) values (@Color)
		set @Resultado = SCOPE_IDENTITY()
	end
	ELSE 
		set @Mensaje ='No se puede repetir el color'
end

go

-- Procedimiento para modificar color

create procedure SP_Editarcolor(
@IdColor int,
@Color varchar(30),
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	SET @Resultado = 1
	SET @Mensaje=''

	IF NOT EXISTS (select * from COLORES where Color = @Color)
		update COLORES set
		Color = @Color
		where Id_color = @IdColor
	else
	begin 
		set @Resultado = 0
		set @Mensaje = 'No se puede repetir el color'
	end

end

go

-- Procedimiento para eliminar color

create procedure SP_Eliminarcolor(
@IdColor int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	set @Resultado = 1
	SET @Mensaje=''
	if not exists (
		select * from COLORES c
		inner join PRENDAS p on p.Color_id = c.Id_color
		where c.Id_color = @IdColor
	)
	begin 
		delete top(1) from COLORES where Id_color = @IdColor
	end
	else
	begin
		SET @Resultado = 0
		set @Mensaje = 'El color se encuentra relacionada a una prenda'
	end
end

---- PROCEDIMIENTO PARA TALLAS

--procedimiento para registrar talla

 create procedure SP_Registrartalla(
@Talla varchar(18),
@Resultado int output,
@Mensaje varchar(500) output
)as 
begin 
	SET @Resultado = 0
	SET @Mensaje=''

	IF NOT EXISTS (SELECT * FROM TALLAS WHERE talla = @Talla)
	begin 
		insert into TALLAS(Talla) values (@Talla)
		set @Resultado = SCOPE_IDENTITY()
	end
	ELSE 
		set @Mensaje ='No se puede repetir la Talla'
end


-- Procedimiento para modificar talla

create procedure SP_EditarTalla(
@IdTalla int,
@Talla varchar(18),
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	SET @Resultado = 1
	SET @Mensaje=''

	IF NOT EXISTS (select * from TALLAS where talla = @Talla)
		update Tallas set
		Talla = @Talla
		where Id_talla = @IdTalla
	else
	begin 
		set @Resultado = 0
		set @Mensaje = 'No se puede repetir la talla'
	end

end

--procedimiento para elimiar talla

create procedure SP_EliminarTalla(
@IdTalla int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	set @Resultado = 1
	SET @Mensaje=''
	if not exists (
		select * from tallas t
		inner join PRENDAS p on p.Talla_id = t.Id_talla
		where t.Id_talla = @IdTalla
	)
	begin 
		delete top(1) from TALLAS where Id_talla = @IdTalla
	end
	else
	begin
		SET @Resultado = 0
		set @Mensaje = 'La Talla se encuentra relacionada a una prenda'
	end
end


-- PROCEDIMIENTO PARA SUBCATEGOR√çAS

-- procedimiento para guardar subcategor√≠a

CREATE PROC SP_Registrarsubcategoria(
@Subcategoria varchar(50),
@IdCategoria int,
@Resultado int output,
@Mensaje varchar(500) output
)as 
begin 
	SET @Resultado = 0
	SET @Mensaje=''

	IF NOT EXISTS (SELECT * FROM SUBCATEGORIAS WHERE subcategoria = @Subcategoria)
	begin 
		insert into SUBCATEGORIAS(subcategoria,Categoria_id) values (@Subcategoria, @IdCategoria)
		set @Resultado = SCOPE_IDENTITY()
	end
	ELSE 
		set @Mensaje ='No se puede repetir la subcategoria'
end

go

-- Procedimiento para modificar subcategoria 

create procedure SP_Editarsubcategoria(
@Idsubcategoria int,
@Subcategoria varchar(50),
@IdCategoria int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	SET @Resultado = 1
	SET @Mensaje=''

	IF NOT EXISTS (SELECT * FROM SUBCATEGORIAS WHERE subcategoria = @Subcategoria)
		update SUBCATEGORIAS set
		subcategoria = @Subcategoria,
		Categoria_id = @IdCategoria
		where Id_subcategoria = @Idsubcategoria
	else
	begin 
		set @Resultado = 0
		set @Mensaje = 'No se puede repetir la subcategoria'
	end

end

go

-- Procedimiento para eliminar subcategor√≠a

create procedure SP_Eliminarsubcategoria(
@IdSubcategoria int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	set @Resultado = 1
	SET @Mensaje=''
	if not exists (
		select * from SUBCATEGORIAS sc
		inner join PRENDAS p on p.Subcategoria_id = sc.Id_subcategoria
		where sc.Id_subcategoria = @IdSubcategoria
	)
	begin 
		delete top(1) from SUBCATEGORIAS where Id_subcategoria = @IdSubcategoria
	end
	else
	begin
		SET @Resultado = 0
		set @Mensaje = 'La subcategoria se encuentra relacionada a una prenda'
	end
end


-- PROCEDIMIENTOS PARA CLIENTES -----------------------

CREATE PROC sp_RegistrarCliente(
@Nombre varchar(50),
@Cedula varchar(14),
@Celular varchar(14),
@Direccion varchar(40),
@Fecha_nacimiento datetime,
@Sexo_id int,
@Resultado int output,
@Mensaje varchar(500) output
)as
begin
	SET @Resultado = 0
	DECLARE @IDPERSONA INT
	IF NOT EXISTS (SELECT * FROM CLIENTES WHERE Cedula = @Cedula)
	begin
		insert into CLIENTES(Nombre, Cedula, Celular, Direccion, Fecha_nacimiento, Sexo_id) values(
		@Nombre, @Cedula, @Celular, @Direccion, @Fecha_nacimiento, @Sexo_id)

		set @Resultado = SCOPE_IDENTITY()
	end
	else
		set @Mensaje = 'El n√∫mero de cedula ingresado ya existe'
end

GO

CREATE PROC sp_ModificarCliente(
@Id_cliente int,
@Nombre varchar(50),
@Cedula varchar(14),
@Celular varchar(14),
@Direccion varchar(40),
@Fecha_nacimiento datetime,
@Sexo_id int,
@Resultado int output,
@Mensaje varchar(500) output
)as
begin
	SET @Resultado = 1
	DECLARE @IDPERSONA INT
	IF NOT EXISTS (SELECT * FROM CLIENTES WHERE Cedula = @Cedula and Id_cliente != @Id_Cliente)
	begin
		update CLIENTES set
		Nombre = @Nombre,
		Cedula = @Cedula,
		Celular = @Celular,
		Direccion = @Direccion,
		Fecha_nacimiento = @Fecha_nacimiento,
		Sexo_id = @Sexo_id
		where Id_cliente = @Id_cliente
	end
	else
	begin
		SET @Resultado = 0
		SET @Mensaje = 'El n√∫mero de documento ya existe'
	end
end

GO

--------- PROCEDIMIENTOS PARA PROVEEDORES ----------

create PROC SP_RegistrarProvedor(
@Provedor varchar(50),
@Telefono varchar(14),
@Correo varchar(20),
@Resultado int output,
@Mensaje varchar(500) output
)as
begin
	SET @Resultado  = 0
	DECLARE @IDPERSONA INT
	IF NOT EXISTS (SELECT * FROM PROVEDORES WHERE Provedor = @Provedor)
	begin
		insert into PROVEDORES(Provedor, Telefono, Correo)
		values (
		@Provedor,
		@Telefono,
		@Correo
		)

		set @Resultado = SCOPE_IDENTITY()
	end
	else
		set @Mensaje = 'El proveedor ya existe.'
end

GO

create PROC SP_ModificarProvedor(
@Id_provedor int,
@Provedor varchar(50),
@Telefono varchar(14),
@Correo varchar(20),
@Resultado int output,
@Mensaje varchar(500) output
)as
begin
	SET @Resultado = 1
	DECLARE @IDPERSONA INT
	IF NOT EXISTS (SELECT * FROM PROVEDORES WHERE Provedor = @Provedor and Id_provedor != @Id_provedor)
	begin
		update PROVEDORES set
		Provedor = @Provedor,
		Telefono = @Telefono,
		Correo = @Correo
		where Id_provedor = @Id_provedor
	end
	else
	begin
		SET @Resultado = 0
		SET @Mensaje = 'El proveedor ya existe'
	end
end

GO

create procedure SP_EliminarProvedor(
@Id_provedor int,
@Resultado bit output,
@Mensaje varchar(500) output
)
as
begin
	SET @Resultado = 1
	IF NOT EXISTS (
		select * from PROVEDORES p
		inner join COMPRAS c on p.Id_provedor = c.Provedor_id
		where p.Id_provedor = @Id_provedor
		)
	begin
		delete top (1) from PROVEDORES where Id_provedor = @Id_provedor
	end
	else
	begin
		SET @Resultado = 0
		SET @Mensaje = 'No se puede eliminar el proveedor porque se encuentra relacionado a una compra.'
	end
end

GO



-- INSERTS

-- insert roles
insert into roles (rol) values
('ADMINISTRADOR'),
('EMPLEADO')


-- insert permisos
INSERT INTO PERMISOS(Rol_id, NombreMenu) values
(1, 'menuusuarios'),
(1, 'menumantenedor'),
(1, 'menuventas'),
(1, 'menucompras'),
(1, 'menuclientes'),
(1, 'menuproveedores'),
(1, 'menureportes'),
(1, 'menuacercade'),
(2, 'menuventas'),
(2, 'menucompras'),
(2, 'menuclientes'),
(2, 'menuproveedores'),
(2, 'menuacercade')

INSERT INTO USUARIOS (Nombre, Usuario, Contrasena, Rol_id) VALUES ('Jose Rivillas', 'joseale58', abc', 1); ('Juli√°n Trump', 'juliancho', 'def', 2);

INSERT INTO SUBCATEGORIAS(subcategoria, Categoria_id) VALUES ('Blusas',1),('Medias de ositos',2),('Sueter deportivo',3)
INSERT INTO CATEGORIAS(Categoria) VALUES ('Ropa Mujer'),('Ropa bebe'),('Ropa Hombre')
INSERT INTO TALLAS(Talla) VALUES ('S'),('M'),('Xl')
INSERT INTO COLORES(Color) VALUES ('Amarillo'),('Rojo'),('Verde')

INSERT INTO SEXOS(Sexo) VALUES ('Masculino'), ('Femenino')

-- Correcciones
ALTER TABLE PROVEDORES
ADD Telefono varchar(14);

ALTER TABLE PROVEDORES
ADD Correo varchar(50);

ALTER TABLE COMPRAS
ADD Provedor_id int references PROVEDORES(Id_provedor);

